01. 선언과 표현 그리고 호이스팅
    - 함수 선언문
        function 함수이름() {내용}
        function 키워드로 시작, 함수이름이 있어야한다.
        호이스팅현상이 작동한다.
    - 함수 표현식
        const 변수이름 = function () {내용}
        const, let으로 변수 이름 지정 후 함수를 할당함.
    - 함수 선언문, 함수 표현식 동일하게 변수이름()으로 호출할수 있다.
    - 호이스팅(Hoisting)
        함수가 선언되어진 해당하는 코드를 선언된 유효한 범위 내에서 최상단으로 올라가서 동작이된다.
        함수 선언문에서만 동작하며 함수 표현식에서는 동작 안한다.
    - 함수 구현부는 코드 제일 아래쪽에 배치하는게 좋다. 단, 함수명은 유추할수있는 함수명으로 지정하면 좋다.
        

02. 반환 및 종료
    - 반환
        return 키워드로 함수내 데이터를 반환한다.
        함수를 호출시 return 키워드로반환되는 데이터를 남긴다.
        return 키워드 이후 코드는 동작하지 않는다.(함수를 종료시킨다.)


03. 매개변수 패턴
    - 기본
        function 함수명(a, b) {}
        함수명(1, 2) a = 1, b = 2
        a, b = argument, 인수
        들어오는 데이터를 순서대로 받는다.
        인수 순서대로 넣어야한다.
        기본값 지정 function 함수명(a, b = 1) {}
        들어오는 값이 있다면 기본값을 무시한다.
    - 구조 분해 할당
        function 함수명({ 속성 }) {}
        객체 데이터 내 속성을 구조 분해 해서 필요 속성을 찾을 수 있다.
        문법이 간단해진다.
        속성이 없는 값을 조회하면 undefined 반환한다.
        기본값 지정 function 함수명({ 속성 = '문자' }) {}
    - 배열 구조 분해 할당
        function 함수명([속성1, 속성2, 속성3]) {}
        ex) 속성2 반환 
            function 함수명([, 속성2]) {} (이와같이 처음 속성을 위한 ,(쉼표)를 사용하고 두번째 이후 쉼표는 생략가능)
            원하는 속성 이후 속성은 무시가 가능하다. (배열구조분해할당 참고)
    - 나머지 매개변수
        - 전개연산자
            function 함수명(...속성) {}
            인수 모든걸 배열로 저장한다. 
            ...(전개연산자)를 이용하여 사용한다.
            
            arguments : 유사배열(배열데이터처럼 생긴 객체)
                        따로 지정하지 않아도 함수 내부에서 사용가능한 객체
                        reduce() 메소드를 사용할수 없음.
                        직관적이지 않음


04. 화살표 함수


05. 즉시실행함수(IIFE)


06. 콜백


07. 재귀


08. 호출 스케줄링


09. this