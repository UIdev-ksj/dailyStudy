01. 선언과 표현 그리고 호이스팅
    - 함수 선언문
        function 함수이름() {내용}
        function 키워드로 시작, 함수이름이 있어야한다.
        호이스팅현상이 작동한다.
    - 함수 표현식
        const 변수이름 = function () {내용}
        const, let으로 변수 이름 지정 후 함수를 할당함.
    - 함수 선언문, 함수 표현식 동일하게 변수이름()으로 호출할수 있다.
    - 호이스팅(Hoisting)
        함수가 선언되어진 해당하는 코드를 선언된 유효한 범위 내에서 최상단으로 올라가서 동작이된다.
        함수 선언문에서만 동작하며 함수 표현식에서는 동작 안한다.
    - 함수 구현부는 코드 제일 아래쪽에 배치하는게 좋다. 단, 함수명은 유추할수있는 함수명으로 지정하면 좋다.
        

02. 반환 및 종료
    - 반환
        return 키워드로 함수내 데이터를 반환한다.
        함수를 호출시 return 키워드로반환되는 데이터를 남긴다.
        return 키워드 이후 코드는 동작하지 않는다.(함수를 종료시킨다.)


03. 매개변수 패턴
    - 기본
        function 함수명(a, b) {}
        함수명(1, 2) a = 1, b = 2
        a, b = argument, 인수
        들어오는 데이터를 순서대로 받는다.
        인수 순서대로 넣어야한다.
        기본값 지정 function 함수명(a, b = 1) {}
        들어오는 값이 있다면 기본값을 무시한다.
    - 구조 분해 할당
        function 함수명({ 속성 }) {}
        객체 데이터 내 속성을 구조 분해 해서 필요 속성을 찾을 수 있다.
        문법이 간단해진다.
        속성이 없는 값을 조회하면 undefined 반환한다.
        기본값 지정 function 함수명({ 속성 = '문자' }) {}
    - 배열 구조 분해 할당
        function 함수명([속성1, 속성2, 속성3]) {}
        ex) 속성2 반환 
            function 함수명([, 속성2]) {} (이와같이 처음 속성을 위한 ,(쉼표)를 사용하고 두번째 이후 쉼표는 생략가능)
            원하는 속성 이후 속성은 무시가 가능하다. (배열구조분해할당 참고)
    - 나머지 매개변수
        - 전개연산자
            function 함수명(...속성) {}
            인수 모든걸 배열로 저장한다. 
            ...(전개연산자)를 이용하여 사용한다.
            
            arguments : 유사배열(배열데이터처럼 생긴 객체)
                        따로 지정하지 않아도 함수 내부에서 사용가능한 객체
                        reduce() 메소드를 사용할수 없음.
                        직관적이지 않음


04. 화살표 함수
    - es6의 새로생긴 기능. 기존 함수 코드를 간편하게 사용할수 있다.
    - 코드의 차이
        화살표함수 : const sum = () => {}
        기존함수 : function sum() {}
                    const sum = function () {}
    - 패턴
        - 매개변수가 하나일땐 ()(소괄호)를 생략가능하다.
          단, 두개 이상 혹은 없을땐 ()(소괄호)를 사용해야된다.
          ex) const b = x => {}
        - return 키워드와 {}(중괄호)는 생략이 가능하다.
          단, 함수 내 return으로 시작할시 생략이 가능하며 다른 로직으로 시작시 생략이 불가능하다.
          ex) 생략가능
              const sum = (a, b) => a + b
          ex) 생략불가능
               const sum = (a, b) => {
                    console.log(a + b)
                    return a + b
               }
        - return 키워드로 시작하고 객체데이터를 반환하게 되면 {}(중괄호)와 return 키워드를 생략가능하다.
          하지만 객체데이터는 {}(중괄호)로 감싸져 있기 때문에 그대로 사용하면 오류가 난다.
          아래와 같이 ()소괄호로 객체데이터를 감싸면 사용이 가능하다.
          ex) const g = () => { return { a : 1 } }
              const g = () => { a : 1 } //틀린코드
              const g = () => ({ a : 1 }) //()소괄호로 감싸면 가능하다.
        - 배열데이터는 return과 {}(중괄호) 생략이 가능하다.
          ex) const i = () => [1, 2, 3]
    - 함수 내부에서 사용하는 this 키워드가 있는데 function으로 시작하는 함수와 화살표함수에서 해석하는 차이가 발생한다.


05. 즉시실행함수(IIFE)
    - Immediately-Invoked Function Expression의 약자인 IIFE
    - 즉시 실행이 되는 함수 표현식
    - 기존함수는 함수를 만들고 호출해줘야 실행이 가능하다.
    - 즉시실행함수 앞은 ;(세미콜론)을 붙여주는게 좋다.
    - 패턴
        ;(() => {})()           // (함수)() 화살표함수는 패턴이 한개
        ;(function () {})()     // (함수)()
        ;(function () {}())     // (함수())
        ;!function () {}()      // !함수()
        ;+function () {}()      // +함수()
    - 두번째 ()(소괄호)에 들어가는 데이터들을 즉시 실행하는 해당함수에 매개변수로 전달할수 있다.
        전역데이터들의 이름을 간소화 하여 난독화 할수있다.
        ex) ;((a, b) => {
                console.log(a)
                console.log(b)
            })(1, 2)    


06. 콜백
    - 다른함수가 호출될때 함수호출의 인수로 사용되는 함수
    - 함수가 데이터라는것을 응용하여 다른함수의 인수로 전달하며 다른함수 내부에 호출하는 개념
    - 함수가 실행될때 인수로 들어가는 또하나의 함수
    - 매개변수가 받아서 함수내에서 실행가능 (예제확인하여작성)


07. 재귀(Recursive)
    - 하나의 함수에서 함수 자기 자신을 내부에서 호출해서 사용하는 방법
    - 재귀는 무한반복이 된다. 조건을 추가하여 무한 반복이 안되게 해야한다.


08. 호출 스케줄링
    - 함수 호출을 지연하거나 반복적으로 호출
    - 종류
        - setTimeout() : 지정한 시간뒤에 실행
        - clearTimeout() : setTimeout() 종료
        - setInterval() : 지정한 시간마다 실행
        - clearInterval() : setInterval() 종료


09. this
    - 일반 함수
        호출 위치에서의 정의
        메소드에서 :(콜론), function을 생략 할수있다.
        ex) 속성명: function () {}
            속성명() {}
    - 화살표 함수
        자신이 선언된 함수(렉시컬) 범위에서 정의, 자신을 감싸고 있는 외부함수를 참조

    - 참고
        객체데이터에서 특정한 속성(property)에 함수를 할당하게 되면 메소드(method)로 부를수 있다.
        속성(property)과 메소드(method) 묶어 멤버라고 부른다.