01. prototype
    javascript는 prototype 언어 기반이다. 하지만 class방식을 사용가능하다.
    
    배열데이터에 사용할수 있는 속성, 메소드는 prototype과 연결되어있다.
    length, includes() prototype 속성(메소드)
    includes() : 메소드, 배열데이터에 특정아이템이 있는지 확인. true, false 반환한다.

    **prototype : 
        new 키워드를 통해 만든 생성자 함수에서 반환된 결과 (instance(인스턴스))
        instance(인스턴스)에서 사용할수 있는 별도의 속성이나 메소드를 등록하는 객체

    new 키워드로 호출하는 함수는 생성자 함수

    객체 리터럴 방식으로 만드는 객체나
    함수 내부에서 this키워드로 속성을 만들고 new키워드로 호출해서 생성하는 객체 데이터나 같다.
    리터럴 방식으로 만드는게 편하기 때문에 많이 사용한다.
    두번째 방식의 장점은 객체 내부 메소드를 효율적으로 사용하기 위함이다.

    ES6에선 prototype 속성으로 등록이 가능하지만 class 문법을 통해 간소화, 고도화 할수 있다.



02. ES6 Class 기본 문법
    class 문법은 javascript 기존에 가지고 있던 prototype 방식을 내장하여 새로운 문법으로 돌아가게된다.
    new 키워드와 함게 함수처럼 호출하여 인스턴스 결과를 통해 데이터를 활용할수 있다.

    constructor() : 함수를 대체한다..?


03. Getter, Setter
    Getter (get)
        어떤 값을 얻는(조회) 용도의 메소드
        type1 방식 : new 키워드를 통해 생성자 함수를 호출할때 최초로 만들어지고 이후 변하지 않는다.
        type2 방식 : 메소드를 ()(소괄호)로 열고 닫아서 호출해야한다.
        방식
            get 함수명() {} 방식으로 쓰인다.
            함수명의 속성의 데이터가 된다. 속성처럼 사용가능하다.
            새로운 데이터를 만들어서 반환한다.
            일반 함수와 동일하게 동작한다.

    Setter (set)
        어떤 값을 지정(할당)하는 용도의 메소드
        set 함수명(인수) {} 방식으로 쓰인다.
        할당연자를 통해 인수를 받아서 속성으로 저장이 된다.
    
    **속성처럼 사용가능하다.



04. 정적 메소드


05. 상속과 instanceof


06. instanceof와 constructor