01. 산술, 할당, 증감 연산자
    - 산술연산자 : +, -, *, /, %(나머지연산자 앞의 숫자를 뒤의 숫자로 나눈후 나머지 값)
    - 할당 연산자
        = 기호를 사용한다. let으로 할당해야 재할당이 가능함
        산술연산자와 조합할수 있다.
        +=, -=, *=, /=, %= 이런식으로 사용할수 있다. (꼭기호의 순서를 지켜야된다.)
    - 증감 연산자
        a++ : 증가연산자, 1을 더한다. 대신 값을 출력한 후 증가
        ++a : 1을 더한다. 값에 1을 먼저 더한 후 값을 출력 
        a-- : 감소연산자, 1을 뺀다. 대신 값을 출력한 후 감소
        --a : 1을 더한다. 값에 1을 먼저 뺀 후 값을 출력


02. 부정, 비교 연산자
    - 부정 연산자
        데이터의 반대되는 의미 앞에 !추가 한다.
        !를 여러개 사용하여 부정의 의미를 계속 추가할수 있다.
    - 비교 연산자
        == : 동등하다. 일치연산자로 사용을 추천
        != : 동등하지 않다. 일치연산자로 사용을 추천
        === : 일치
        !== : 불일치
        a > b : a가 b보다 크다
        a >= b : a가 b보다 크거나 같다
        a < b : a가 b보다 작다
        a =< b : a가 b보다 작거나 같다


03. 논리 연산자 **
    - a && b (참 데이터 기준)
        and 연산자, a와 b가 참.
        참과 거짓에 해당하는 데이터를 피연산자로 사용 가능하며, 거짓 데이터를 만나게되면 반환한다.
        모두 참 데이터 일경우 마지막 참 데이터를 반환된다.
    - a || b (거짓 데이터 기준)
        or 연산자, a와 b 둘중에 하나가 참.
        참과 거짓에 해당하는 데이터를 피연산자로 사용 가능하며, 참 데이터를 만나게되면 반환한다.
        모두 거짓 데이터 일경우 마지막 거짓 데이터를 반환된다.

04. Nullish 병합, 삼항 연산자
    - Nullish 병합
        사용 기호 : ??
        왼쪽에서 오른쪽으로 해석.
        null, undefined 데이터는 건나 뛰고 그외 데이터는 반환한다.
        null, undefined 데이터 아닐경우 처음만나는 데이터를 반환
        데이터가 null이나 undefined일경우 마지막 데이터를 반환한다.
    - 삼항 연산자
        ?와 :기호를 사용하여 작성한다.
        조건 ? 참조건 : 거짓조건 으로 구성되어 있다.
        if문보다 간결하게 사용할수 있다.


05. 전개 연산자
    사용 기호 : ...
    배열데이터에서 [](대괄호)를 날려준다.
    객체데이터에서 {}를 날려준다.

    //참고
    concat : 배열 합치기
    assign : 객체 합치기


06. 구조 분해 할당
    배열안의 아이템을 각각의 변수로 지정할려면 인덱싱을 사용하여 변수로 지정해야되지만,
    배열 구조를 분해해서 동일한 구조의 변수에 재할당하는 방법
    구조를 맞춰 순서대로 할당하므로 필요없는 순서는 비워두되 쉼표는 있어야 한다.

    객체데이터안에서는 속성 이름이 지정되있기 때문에 구조 분해 후 원하는 속성 이름을 사용하면된다.
    객체데이터안의 속성이름을 변경하기위해선 :(콜론)기호를 이용한다.

    
    - 대괄호 또는 소괄호로 시작할때는 앞에 ;(세미콜론) 붙여주는 방식을 사용하자.


07. 선택적 체이닝 (Optional Chaining)
    - 데이터가 null이나 undefined 경우 속성을 조회할수 없어 점표기법으로 속성을 조회하면 에러가 난다.
    - 이를 방지 하기 위해 선택적 체이닝을 사용하게 된다.
    - 객체이름?.속성 이와같이 사용 된다. (ex : user?.name)
    - 다양한 상황의 데이터를 취급할때 에러가 발생하는 것을 방지하고 예외처리를 하는것이 목적
    - 주의점 : 점표기법을 사용해야 하지만 특수상황에서만 명확하게 사용, 남용해서는 안된다.


08. If, Switch 조건문
    - if문
        if : 참일경우 코드 실행
        else : 거짓일 경우 코드 실행
        else if : 새로운 조건이 참일 경우 실행
    - Switch문
        조건이 내부의 case일때 코드를 실행.
        꼭 case 내부 마지막에 break 를 넣어줘야 실행 후 멈추게 된다.
        조건 내부에 break로 멈춰줘야 되지만 조건에 따라 return 으로 반환 시켜 break를 사용 안할수도 있다.
        case : 조건이 맞을때 실행
        default : case의 조건이 모두 아닐때 실행
    - if문과 switch문은 취향에 따라 사용 하지만 코드를 간결하게 사용할수 있는 방식으로 사용해야된다.
    - switch문은 if문으로 변경 가능하지만, if문은 switch문은 변경이 불가할수도 있다.


09. For, For of, For in 반복문
    - for 반복문
        사용 방법 : for (초기화; 조건; 증감) {} //마지막 증감에는 ;사용안함
        조건에 따라 증감하여 계속 반복하며 조건에 맞춰 종료된다.
        break : 반복이 종료된다.
        continue : 현재 반복이 종료되고 다음 반복으로 넘어간다.
    - for of 반복문
        배열데이터 갯수에 맞게 자동으로 반복 시킴
        방식 : for (const 변수 of 배열변수이름) {}
        for문으로 length을 생략 가능하며 단순하게 반복 가능하다.
    - for in 반복문
        객체데이터 사용할때에 for in 반복문을 사용하여 속성에 접근할수 있다.
        방식 : for (const 변수 in 객체변수이름) {}
        객체 데이터 속성은 순서가 없으므로 확인해야된다.


10. While, Do while 반복문
    - While 반복문
        조건이 참이면 반복, 조건이 거짓이 되야 반복이 멈춘다.
        거짓이 되는 상황을 상정해서 작업해야한다 안그러면 무한반복으로 브라우저가 뻣음
    - Do while 반복문
        do라는 중괄호 부분을 먼저 실행 후 while 조건을 실행한다.
        최초 1번은 조건을 실행해야 한다면 do while 반복문을 사용하면 된다.
        사용 방법은 아래와 같다.
        do {
            조건
        } while (반복조건)

